1.	Program type:
    Running the command `file ./bonus0` we see the file is 32-bit ELF
	executable.
	Running the command `checksec --file ./bonus0, we see that the stack is
	executable (NX disabled).
2.	Content:  
    There's two functions appart of `main`, a function called `pp` dirrectly
    called by main and another function `p` called in `pp` (not a very bright namming
    convention to say the least).

    The general behavior of the program is pretty straightforward, it seems like
    the program read from the standard input twice the concatenate what the user passed
    separated with a space and prints it.

    When we look at the binary we see that th main got an internal buffer that she passes
    to the function `pp` then prints it using `puts`
    `pp` calls another function called `p`.

    `p` reads 0x1000 bytes and puts it in a buffer at least that size then puts a
    0x0 at the end of the passed input using `strchr` on newline character
    then copies that content into the buffer passed as a parameter.

    Back to `pp` now, we notice that we have two buffers and that their size is
    only 0x14 each, `p` calls `pp` twice to fill it internal buffers.
    the first buffer is copied into a buffer passed in parameter on the function,
    then a space is added at the end of the string then a 0x0, then uses strcat to
    concatenate it with the second buffer then returns it.

    We see multiple problems in this implementation:
        * the first one being that `p` only puts 0x0 at the end of the line passed into
        stdin without talking into consideration the size of the buffer that it will be
        passed to thus making it possible to have a non null for exemple if the first
        line passed to stdin is bigger than 20:
```
            bonus0@RainFall:~$ ./bonus0
            -
            AAAAAAAAAAAAAAAAAAAAAA
             -
            BBBBBBB
            AAAAAAAAAAAAAAAAAAAABBBBBBB BBBBBBB
``
        * the second is that the buffer allocated to read is overkill for the ammount of
        data its supposed to store.

3.  Solution:
    The first thing we could to search for the position of the eip and see if we can
    reach it utilising what we found earlier, and yes we can reach it !

    0x080485a7 <+3>:	and    esp,0xfffffff0
    0x080485aa <+6>:	sub    esp,0x40
    0x080485ad <+9>:	lea    eax,[esp+0x16]
    0x080485b1 <+13>:	mov    DWORD PTR [esp],eax
    0x080485b4 <+16>:	call   0x804851e <pp>
    
    Tooking at this chunk of disassembly code we see that the stack got a size of 0x40,
    After <main +3> we notice that:

    esp            0xbffff6f0	0xbffff6f0 <-- the address of esp got 8 bytes lower on the stack
    ebp            0xbffff6f8	0xbffff6f8

    And that the first buffer starts at ebp - 0x30, so to reach the ebp we should write
    0x40 - 0x16 + 0x8 bytes so 50 characters to reach the ebp and so 54 to reach the eip.

    teoritically we can write as a max 61 characters 20 of the first buffer, 20 of the second
    1 for the space then 20 of the sucond buffer again.

    I didnt mention where we were going to store our shell code for an obvious reason, the 0x1000
    bytes of read buffer seems like the obvious place to put it in.

    So from there it seems like its just a game of finding a suitable position to return to in the
    read buffer.

